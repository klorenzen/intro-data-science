<section xml:id="section-3-5">
	<title>Python Fundementals</title>
	<subsection><title>Data Types and Logical Expressions</title>
		<p>
			We will start with the basic variable types. Our data usually comes as one of these.
			<ul>
				<li><p>Numerical: Whole numbers <c>int</c>, decimal numbers <c>float</c></p></li>
				<li><p>Text: Single characters <c>char</c>, strings of characters <c>str</c></p></li>
				<li><p>Binary: Boolean, True or False <c>bool</c></p></li>
			</ul>
		</p>

		<p>We store our data as a variable which we give a name to. To assign a name, we use <c>=</c>. For example <c>x=2</c> gives <c>2</c> the name <c>x</c>. This allows us to use the name down the road. We can also reassign the name to a different value of data. For example, <c>x=x+5</c> would take our old value of <c>x</c>, add <c>5</c>, and then reassign the variable <c>x</c> to this new value. Try it below!
			<program xml:id="first-var-python" interactive='activecode' language="python" label="first-var">
		<input>
		x=2
		x=x+5
		print(x)
	</input>
		</program>
	</p>

	<p>This comes up a lot, so much so that there are short cuts for this. 
		<ul>
			<li><p><c>x+=5</c> is the same as <c>x=x+5</c></p></li>
			<li><p><c>x-=5</c> is the same as <c>x=x-5</c></p></li>
		</ul>
		Assign <c>x</c> the value <c>2</c>. Add <c>3</c> to <c>x</c>, reassign this value to <c>x</c>.
		<program xml:id="sec-var-python" interactive='activecode' language="python" label="sec-var">
		
		</program>
	</p>
	<p>
		With every type of data there are different types of operations we can do to it. For <c>int</c> and <c>float</c> we can do the following operations with the code.
		<ul>
			<listing><p>Addition, for example <c>1+2</c></p></listing>
			<listing><p>Multiplication, for example <c>1*2</c></p></listing>
			<listing><p>Exponents, for example <c>2**7</c></p></listing>
			<listing><p>Division, for example <c>1+2</c></p></listing>
			<listing><p>Remainder, for example <c>7%2</c></p></listing>
		</ul>
	</p>
	<p>
		Try some of these out in the cell below. If you need heavy duty math operations, use the package <c>NumPy</c>. 
		<program xml:id="python-ints-flts" interactive='activecode' language="python" label="ints-flts">
		
		</program>
	</p>

	----astype() pandas add on---

	<p> For <c>char</c> and <c>str</c> we can do the following operations with the code.
		<ul>
			<listing><p>Addition, for example <c>'c'+'d'</c></p></listing>
			<listing><p>Multiplication, for example <c>1*'c'</c></p></listing>
			<listing><p>Indexing, for example <c>my_string="My string is the best string"
my_string[5]
my_string[6:9]</c></p></listing>
			<listing><p>Locating, for example <c>'m' in my_string
'LinfieldUniversity'.startswith('Linfield')
'LinfieldUniversity'.find('Uni')</c></p></listing>
			<listing><p>Make upper or lowercase, for example <c>my_string.upper()
my_string.lower()</c></p></listing>
<listing><p>Counting occurances, for example <c>my_string.count('e')</c></p></listing>
<listing><p>Replacement, for example <c>my_string.replace('i','e')</c></p></listing>
<listing><p>Removing spaces, for example <c>my_string.strip()</c></p></listing>
		</ul>
		Try some of these out in the cell below. 
		<program xml:id="python-chars-str" interactive='activecode' language="python" label="chars-str">
		my_string="My string is the best string"
		print(my_string[5])
		</program></p>
	

<p>Finally, we will look at <c>bool</c> opperations. We will use these often for filtering our data. A boolean variable is either true or false. We can form boolean variables through checking comparisons. In addition there are boolean operators that allow us to have multiple comparisons at once. 
<ul>
			<listing><p>AND, returns true if both statements are true <c>True and True</c> or </p></listing>
			<listing><p>OR, returns true if at least one statement is true <c>True or True</c> or <c>True | True</c></p></listing>
			<listing><p>Not, returns the opposite boolean varialbe <c>not True</c> or <c>!True</c></p></listing>
		</ul>

		To compare, we can use the following expressions.

<ul>
			<listing><p>Equality, <c>2 == 3</c> </p></listing>
			<listing><p>Not equal <c>2 != 3</c></p></listing>
			<listing><p>Greater than <c>2>3</c></p></listing>
			<listing><p>Less than <c>2  3</c></p></listing>
			<listing><p>Greater than or equal to<c>2>=3</c></p></listing>
			<listing><p>Less than or equal to <c>2 =3</c></p></listing>
		</ul>
Try some of these out in the cell below. How does the comparison change for <c>char</c> and <c>str</c> variables?
		<program xml:id="python-bools" interactive='activecode' language="python" label="bools">

		</program>

In addition, we commonly use <c>in</c> to check membership</p></subsection>


	<subsection><title>Lists and Dictionaries</title>
<p>Lists are an important data type that we will use frequently. A <term>Lists</term> store other data types (including other lists) and are mutable meaning we can change the entries. To make a list we put our entries into square brackets separated by commas. We call them with an <term>index</term> or the number they are in order. Python begins all indices with zero, so the first entry has index 0. For example, here is a list:</p>

<blockquote><p><c>my_list=['a', 'b', 'c', 4, 10]
</c></p></blockquote>

<p>To print the fourth entry in the list we would write <c>my_list[3]</c>. Try this below: 
	
		<program xml:id="first-list-python" interactive='activecode' language="python" label="first-list">
		<input>
		my_list=['a', 'b', 'c', 4, 10]
		print(my_list)
	</input>
		</program>
	
</p>

<p> We can reassign indices to values by using <c>=</c> which is the assignment operator. For example <c>my_list[3]=7%5</c> reassigns the fourth entry to the remainder of seven divided by five. We can also use special methods of our lists including
<ul>
<li><p><c>my_list.append(x)</c> which would add <c>x</c> to the end of the list,</p></li>
<li><p><c>my_list.pop(2)</c> which would remove the index 2 entry from the list, and </p></li>
<li><p><c>my_list.remove(x)</c> which removes element <c>x</c> from the list</p></li>
</ul>

	Try these below. 
	<program xml:id="amend-list-python" interactive='activecode' language="python" label="amend-list">
		<input>
		my_list=['a', 'b', 'c', 4, 10]
		my_list.append()
		print(my_list)
	</input>
		</program></p>
<p>
	If we want to select a portion of a list we can do a <term>splice</term>. The syntax is <c>my_list[1:3]</c> which will return entries indexed <c>1,2</c>. You can also use negative numbers to grab entries. Try it below to see what happens.
	<program xml:id="splice-list-python" interactive='activecode' language="python" label="splice-list">
		<input>
		my_list=['a', 'b', 'c', 4, 10]
		print(my_list[1:3])
	</input>
		</program>
</p>
	<p>If we want to quickly create a list of numbers that are increasing by a set amount, we can use <term><c>range()</c></term> function. The input is the start and stop+1. If only one input is given, it starts at 0 and ends at stop-1. This function is a generator meaning that we have to tell it we would like it to make a list with the command <c>list(range(start, stop+1))</c>. 

Using <c>range()</c>, make a list that is the numbers <c>3</c> through <c>13</c>.<program xml:id="first-python" interactive='activecode' language="python" label="first-one">
		<input>
		print(list(range(13)))
	</input>
		</program></p>


<p>Dictionaries are helpful when doing cleaning and feature extraction. <term>Dictionaries</term> are like lists expect they are unordered, instead of a index we have a key. Dictionaries use the keys to return the <term>values </term>. To make a dictionary we put our keys-value pairs between curly braces separated by commas. We indicate which entry is the key and which one is the value using a colon. For example,</p>
<blockquote><p>
<c>
my_dict={"apple":"fruit", "bean":"veggie"}
</c></p></blockquote>
<p>Here, <c>"apple"</c> is the key for the value <c>"fruit"</c>. Like lists, dictionaries are changable, meaning we can change, add, or remove items after the dictionary has been created. First, use the key <c>"apple"</c> to call the value <c>"fruit"</c> by using it like an index of a list. 
	<program xml:id="first-dict-python" interactive='activecode' language="python" label="first-ditc">
		<input>
		my_dict={"apple":"fruit", "bean":"veggie"}
		print(my_dict)
	</input>
		</program> 

Try reassigning the value of the key <c>"apple"</c> then try reassigning the value of a key that does not exist in our dictionary like <c>"porkchop"</c>. What do you notice?
<program xml:id="amend-dict-python" interactive='activecode' language="python" label="amend-ditc">
		<input>
		my_dict={"apple":"fruit", "bean":"veggie"}
		print(my_dict)
	</input></program>
</p>

<p>Create a dictionary with duplicate keys, what happens when you print the duplicate key value? 
	<program xml:id="dup-key-dict-python" interactive='activecode' language="python" label="dup-key-ditc">
		<input>
	</input></program></p> 
	</subsection>

	<subsection><title>Writing our own functions</title>
		<p> Now that we have our data verbs we can have more fun gathering information from data. Today we will be exploring how we can mutate columns with more sophistication. 

			In addition to using other people's functions, we can also write our own. This is really useful when we notice that we are doing a repetitive process. If we wanted to write a function that added two to a number it would look like this:</p>
<blockquote>
	<p>
<c>def addTwo(x):
    result=x+2
    return result</c>
</p>
</blockquote>
<p>
Here the <c>def</c> means were are defining a new function, <c>addTwo()</c> is the name of our function that we will use to call again, <c>x</c> is our input variable and <c>:</c> means we are about to give our recipe. Notice the next line is tabbed over, this is important. Once we leave the tabbed lines, we are no longer giving recipe instructions.

The other important part in the <c>return</c> which is followed by the product we want from our function. This is optional. 

Write a function that determines whether a number is even or odd. 
</p>
<sage />
	</subsection>

	<subsection>
		<title>if statements, for loops, and while loops</title>
		<p>Some other programming ideas we will be using are <em>if</em> statements. An <term>if</term> statement is some part of the program that only runs if something is true. For example</p>

<blockquote>
	<p><c>
if x&lt;0:
    x=x*-1
np.squareroot(x)</c></p>
</blockquote>

<p>Similar to a function definition, only the tabbed part happens if <c>x&lt;0</c>. We can also add an <c>else</c> which will allow us to run different lines if it is not true. For example</p>

<blockquote>
	<p><c>
if x==0:
    x+=1
else:
    x=x/10
</c></p></blockquote>

<p>A <term>for</term> loop is a program that will do something to every object in a list (iterable object). It has a variable that is the thing that changes as well as the list that the variable will become. For example</p>

<blockquote>
	<p><c>
for x in [1,2,3,4,5,6]:
    print(x*7)
</c></p></blockquote>

<p>A *while* loop is similar to a <term>for</term> loop although it does not go through a list. It will stop once a logical expression is no longer satisfied. For example</p>

<blockquote>
	<p><c>
x=1
while x&lt;10:
    print(x+2)
    x=x+1
</c></p></blockquote>

<p>Be cautious with <term>while</term> loops that you update the variable otherwise they will run forever. </p>

<activity>
	<statement><p>Write a script that prints all the squares of the odd number between 1 and 10.
		<sage /></p></statement>
	</activity>
</subsection>

<subsection><title>Mutating with functions</title>

	<p>Now that we have more python tools under our belt, we can start to learn how to use these while trying to mutate columns. For this section we will be focusing on the Titanic dataset. The Titanic dataset has a list of all the people onboard the Titanic Oceanliner before it met its tragic end by hitting an iceberg. It is full of interesting information and we will try to extract it all!</p>

	<p>Here is a quick list of some functions that may or may not be helpful as we try to use our data verbs!
		<ol marker="1.">
			<li><p><c>df.isna()</c> - turns all entries to True if it is blank (or has NaN in them) and False otherwise</p></li>
			<li><p><c>df.dropna(axis=0, how="all", inplace=False)</c> - returns a dataset where rows with <em>all</em> blank entries are dropped, note that this does not save the new dataset</p></li>
			<li><p><c>df[ColName].unique()</c> - returns all unique entries in a particular column</p></li>
			<li><p><c>df[ColName].value_counts()</c> - returns all unique entries and the number of times they each occur</p></li>
			<li><p><c>df[ColName].map(dict)</c> - returns a new column where entries in original column are turned into new entries according to the dictionary (keys-old entries, values-new entries)</p></li>
			<li><p><c>df[ColName].apply(func)</c> - returns a new column where entries in original column are turned into new entries according to the dictionary</p></li>
		</ol>
	</p>

	<activity><title>Playing with Titanic Dataset</title>
		<p>Perform the following tasks on the dataset
			<ol marker="a.">
				<li><p>Remove any rows with all blank entries</p></li>
				<li><p>What percentage of the passengers were men? What percentage of survivors were men?</p></li>
				<li><p>How many different life boats were on the ship? How many people were on each one?</p></li>
				<li><p>For each life boat, what was the percentage of male? What percentage were female?</p></li>
				<li><p>Make a new column that classifies the <c>fare</c> a passenger paid for their ticket into one of four groups: less than 10, more than 10 less than 50, more than 50 less than 100, and more than 100. Find the percentage of survivors for each fare class.</p></li>
				<li><p>Find the percentage of survivors by gender and fare class. How does the male survival rates broken down by fare classes compare to the overall percentage of the male survivors? What might this tell you about important factors to determining whether someone survived?</p></li>
			</ol>
		</p>
	</activity>

</subsection>
</section>